@page "/"
@rendermode InteractiveWebAssembly
@using global::Fishzor.Client.Components
@inject FishTankState FishTankState
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<style>
    #fishTank {
        width: 100%;
        height: 100%;
        position: relative;
    }
</style>
<script>
    window.getTankRect = () => {
        var element = document.getElementById("fishTank");
        if (!element) return null;

        return element.getBoundingClientRect();
    }
</script>
<div id="fishTank">
    <PageTitle>Fishy fishy fish</PageTitle>

    <button type="button" class="btn btn-primary btn-sm" @onclick="AddFish">Add fish</button>
    <button type="button" class="btn btn-primary btn-sm" @onclick="RemoveFish" disabled="@(FishTankState.FishCount == 0)">
        Remove fish
    </button>
    @for (int i = 0; i < FishTankState.FishCount; i++)
    {
        <Fish />
    }
</div>
@code {
    [Inject]
    private HttpClient? HttpClient { get; set; }
    private CancellationTokenSource? _cts;

    protected override async Task OnInitializedAsync()
    {
        FishTankState.OnStateChanged += StateHasChanged;
        _cts = new CancellationTokenSource();
        await UpdateFishCount();
        _ = StartPeriodicUpdateAsync(_cts.Token);
    }

    private async Task StartPeriodicUpdateAsync(CancellationToken cancellationToken)
    {
        while (!cancellationToken.IsCancellationRequested)
        {
            await Task.Delay(5000, cancellationToken);
            await InvokeAsync(async () =>
            {
                await UpdateFishCount();
                StateHasChanged();
            });
        }
    }

    private async Task AddFish()
    {
        try
        {
            if (HttpClient is not null)
            {
                var response = await HttpClient.PostAsync("api/fish/add", null);
                if (response.IsSuccessStatusCode)
                {
                    await UpdateFishCount();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding fish: {ex.Message}");
        }
    }

    private async Task RemoveFish()
    {
        try
        {
            if (HttpClient is not null)
            {
                var response = await HttpClient.PostAsync("api/fish/remove", null);
                if (response.IsSuccessStatusCode)
                {
                    await UpdateFishCount();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing fish: {ex.Message}");
        }
    }

    private async Task UpdateFishCount()
    {
        try
        {
            if (HttpClient is not null)
            {
                var response = await HttpClient.GetAsync("api/fish/count");
                if (response.IsSuccessStatusCode)
                {
                    FishTankState.FishCount = await response.Content.ReadFromJsonAsync<int>();
                }            
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating fish count: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_cts != null)
        {
            _cts.Cancel();
            _cts.Dispose();
            await Task.CompletedTask;
        }
    }
}