@implements IDisposable
@using System.Timers
@using Microsoft.JSInterop
@using System.Diagnostics
@using Fishzor.Client.Components
@inject IJSRuntime JSRuntime

<img src="@FishImagePath" alt="@Color" @ref="fishElement"
    style="@($"position: absolute; left: {Position.Left}px; top: {Position.Top}px; transform: scale({Scale}); {(IsClientFish ? "filter: drop-shadow(0 0 10px gold); cursor: move;" : "")}")" />

<div class="message-bubble @(IsMessageVisible ? "visible" : "hidden")"
    style="left: @(Direction == Direction.Right ? Position.Left + WIDTH / 2 : Position.Left - WIDTH / 2)px; top: @(Position.Top - 20)px;">
    @CurrentMessage
</div>

<style>
    .message-bubble {
        position: absolute;
        top: 50%;
        transform: translate(-50%, -50%);
        /* Center the bubble */
        background-color: white;
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 5px 10px;
        max-width: 150px;
        word-wrap: break-word;
        transition: opacity 0.5s ease-in-out;
    }

    .message-bubble.hidden {
        opacity: 0;
    }

    .message-bubble.visible {
        opacity: 1;
    }
</style>
<script>
    function makeDraggable(element, dotNetRef) {
        let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;

        element.onmousedown = function dragMouseDown(e) {
            dotNetRef.invokeMethodAsync('OnDraggingStart')
            e = e || window.event;
            e.preventDefault();

            // get the mouse cursor position at startup:
            pos3 = e.clientX;
            pos4 = e.clientY;

            // drag functions
            document.onmouseup = closeDragElement;
            document.onmousemove = elementDrag;
        }

        function elementDrag(e) {
            e = e || window.event;
            e.preventDefault();
            // calculate the new cursor position:
            pos1 = pos3 - e.clientX;
            pos2 = pos4 - e.clientY;
            pos3 = e.clientX;
            pos4 = e.clientY;

            // set the element's new position:
            element.style.top = (element.offsetTop - pos2) + "px";
            element.style.left = (element.offsetLeft - pos1) + "px";
        }

        function closeDragElement() {
            // disable drag functions when mouse button is released
            document.onmouseup = null;
            document.onmousemove = null;

            // let the c# know the new position
            dotNetRef.invokeMethodAsync('OnDraggingComplete', parseInt(element.style.left, 10), parseInt(element.style.top, 10));
        }
    }
</script>

@code {
    [Parameter]
    public FishColor Color { get; set; }

    [Parameter]
    public bool IsClientFish { get; set; }

    [Parameter]
    public string Scale { get; set; } = "100.0";

    [Parameter]
    public string CurrentMessage { get; set; } = "";

    [Parameter]
    public bool IsMessageVisible { get; set; } = false;

    public string FrameDuration
    {
        get
        {
            if (FishVelocity.dx > 3.0)
            {
                return "66";
            }
            if (FishVelocity.dx > 2.25)
            {
                return "75";
            }
            return "100";
        }
    }

    public Direction Direction => FishVelocity.dx > 0 ? Direction.Right : Direction.Left;

    public string FishImagePath => $"fish/{Color}/{Direction}-{FrameDuration}.png";

    private DotNetObjectReference<Fish>? _dotNetRef;
    private ElementReference fishElement;
    private Point Position = new();
    private Velocity FishVelocity = new();
    private bool _animate = true; // Changed to true by default

    // a single timer drives the animation for all fish
    private static readonly Timer _animationTimer = new(50) { AutoReset = true, Enabled = false };
    private static readonly Random _random = new Random();

    // the size of the fish image
    private const int HEIGHT = 84;
    private const int WIDTH = 144;

    [JSInvokable]
    public async Task OnDraggingStart()
    {
        if (IsClientFish)
        {
            _animate = false;
            await Task.CompletedTask;
        }
    }

    [JSInvokable]
    public async Task OnDraggingComplete(double left, double top)
    {
        if (IsClientFish)
        {
            Position = new Point(left, top);
            NewVelocity();
            _animate = true;
            await Task.CompletedTask;
        }
    }

    private void NewVelocity()
    {
        // choose a new velocity and change direction
        var direction = FishVelocity.dx > 0 ? -1 : 1;
        FishVelocity = new Velocity((_random.NextDouble() * 3.0 + 0.5) * direction, (_random.NextDouble() - 0.5) * 0.5);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // place the new fish at a random point within the tank
            var tankRect = await JSRuntime.InvokeAsync<ClientRect>("getTankRect");
            // the 50 is buffer to keep the fish from being placed too close to the edge
            var left = (tankRect.Width - 50.0) * _random.NextDouble();
            var top = (tankRect.Height - 50.0) * _random.NextDouble();

            Position = new Point(left, top);
            await InvokeAsync(StateHasChanged); // Ensure component re-renders on UI thread

            if (IsClientFish)
            {
                _dotNetRef = DotNetObjectReference.Create(this);
                await JSRuntime.InvokeVoidAsync("makeDraggable", fishElement, _dotNetRef);
            }

            // now turn on the static timer that drives the animation
            // if it's not already running
            if (!_animationTimer.Enabled)
            {
                _animationTimer.Enabled = true;
            }
        }
    }

    protected override void OnInitialized()
    {
        var direction = _random.Next(0, 2) == 0 ? -1 : 1;
        FishVelocity = new Velocity((_random.NextDouble() * 3.0 + 0.5) * direction, (_random.NextDouble() - 0.5) * 0.5);

        _animationTimer.Elapsed += OnTimerElapsedAsync;
    }

    // we need this as a member instead of a lambda to avoid a memory leak when the timer is disposed
    private async void OnTimerElapsedAsync(object? sender, ElapsedEventArgs e) => await MoveFishAsync();

    private async Task MoveFishAsync()
    {
        if (_animate)
        {
            // random chance to change direction and speed
            if (_random.Next(0, 400) < 1)
            {
                NewVelocity();
            }

            var tankRect = await JSRuntime.InvokeAsync<ClientRect>("getTankRect");
            var fishRect = await JSRuntime.InvokeAsync<ClientRect>("getElementRect", fishElement);
            var currentPostion = new Point(fishRect.Left, fishRect.Top);
            var nextPosition = currentPostion + FishVelocity;

            // if the fish is about to hit the edge of the tank, reverse the velocity
            if (nextPosition.Top <= tankRect.Top)
            {
                FishVelocity = new Velocity(FishVelocity.dx, Math.Abs(FishVelocity.dy));
            }
            else if (nextPosition.Top + HEIGHT >= tankRect.Bottom)
            {
                FishVelocity = new Velocity(FishVelocity.dx, -Math.Abs(FishVelocity.dy));
            }

            if (nextPosition.Left <= tankRect.Left)
            {
                FishVelocity = new Velocity(Math.Abs(FishVelocity.dx), FishVelocity.dy);
            }
            else if (nextPosition.Left + WIDTH >= tankRect.Right)
            {
                FishVelocity = new Velocity(-Math.Abs(FishVelocity.dx), FishVelocity.dy);
            }

            // Update the position with the potentially modified velocity
            Position += FishVelocity;

            await InvokeAsync(StateHasChanged); // Ensure component re-renders on UI thread
        }
    }

    public void Dispose()
    {
        _animate = false;
        _animationTimer.Elapsed -= OnTimerElapsedAsync;
        _dotNetRef?.Dispose();
    }
}
